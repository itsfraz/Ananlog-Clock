// index.js
// DOM Elements
const hour = document.querySelector('#hour');
const minute = document.querySelector('#minute');
const second = document.querySelector('#second');
const digitalTime = document.querySelector('.time');
const dateDisplay = document.querySelector('.date');
const modeToggle = document.querySelector('.mode-toggle');
const body = document.querySelector('body');
const timezoneSelect = document.querySelector('#timezone-select');
const alarmTimeInput = document.querySelector('#alarm-time');
const setAlarmBtn = document.querySelector('#set-alarm');
const alarmsList = document.querySelector('#alarms-list');
const stopwatchDisplay = document.querySelector('.stopwatch-display');
const startStopwatchBtn = document.querySelector('#start-stopwatch');
const pauseStopwatchBtn = document.querySelector('#pause-stopwatch');
const lapStopwatchBtn = document.querySelector('#lap-stopwatch');
const resetStopwatchBtn = document.querySelector('#reset-stopwatch');
const lapsContainer = document.querySelector('.laps');
const formatToggle = document.querySelector('#format-toggle');
const formatLabel = document.querySelector('#format-label');
const themeSelect = document.querySelector('#theme-select');
const alarmRepeat = document.querySelector('#alarm-repeat');
const alarmSoundSelect = document.querySelector('#alarm-sound');
const timerDisplay = document.querySelector('.timer-display');
const hoursInput = document.querySelector('#hours');
const minutesInput = document.querySelector('#minutes');
const secondsInput = document.querySelector('#seconds');
const startTimerBtn = document.querySelector('#start-timer');
const pauseTimerBtn = document.querySelector('#pause-timer');
const resetTimerBtn = document.querySelector('#reset-timer');
const timerSoundSelect = document.querySelector('#timer-sound');
const enableSoundBtn = document.querySelector('#enable-sound');

// Audio Elements
const alarmSoundBeep = new Audio('https://assets.mixkit.co/sfx/preview/mixkit-alarm-digital-clock-beep-989.mp3');
const alarmSoundChime = new Audio('https://assets.mixkit.co/sfx/preview/mixkit-morning-clock-alarm-1003.mp3');
const alarmSoundDigital = new Audio('https://assets.mixkit.co/sfx/preview/mixkit-digital-clock-digital-alarm-buzzer-992.mp3');

// Initialize
let currentTheme = 'default';
let alarms = [];
let stopwatchTime = 0;
let stopwatchInterval = null;
let isStopwatchRunning = false;
let laps = [];
let timerTime = 0;
let timerInterval = null;
let isTimerRunning = false;
let activeAlarm = null;
let soundsEnabled = false;

// Sound Functions
function playAlarmSound(soundType) {
    if (!soundsEnabled) return;
    
    stopAlarmSound(); // Stop any currently playing alarm
    
    const soundMap = {
        'beep': alarmSoundBeep,
        'chime': alarmSoundChime,
        'digital': alarmSoundDigital
    };
    
    const sound = soundMap[soundType];
    if (sound) {
        sound.currentTime = 0; // Rewind to start
        sound.loop = true;
        sound.play().catch(e => console.error("Audio play failed:", e));
    }
}

function stopAlarmSound() {
    [alarmSoundBeep, alarmSoundChime, alarmSoundDigital].forEach(sound => {
        sound.pause();
        sound.currentTime = 0;
    });
}

// Enable Sounds Button
enableSoundBtn?.addEventListener('click', () => {
    // Play and immediately pause a sound to satisfy browser autoplay policies
    alarmSoundBeep.play().then(() => {
        alarmSoundBeep.pause();
        alarmSoundBeep.currentTime = 0;
        soundsEnabled = true;
        enableSoundBtn.textContent = "Sounds Enabled!";
        setTimeout(() => {
            enableSoundBtn.textContent = "Enable Alarm Sounds";
        }, 2000);
    }).catch(e => {
        console.error("Failed to enable sounds:", e);
        enableSoundBtn.textContent = "Enable Sounds (Click Again)";
    });
});

// Theme Management
themeSelect.addEventListener('change', (e) => {
    currentTheme = e.target.value;
    applyTheme();
});

function applyTheme() {
    body.className = '';
    body.classList.add(`${currentTheme}-mode`);
    
    const icon = modeToggle.querySelector('i');
    if (currentTheme === 'dark') {
        icon.classList.remove('fa-moon');
        icon.classList.add('fa-sun');
    } else {
        icon.classList.remove('fa-sun');
        icon.classList.add('fa-moon');
    }
}

// Dark Mode Toggle
modeToggle.addEventListener('click', () => {
    const icon = modeToggle.querySelector('i');
    icon.classList.toggle('fa-moon');
    icon.classList.toggle('fa-sun');
    
    if (currentTheme === 'dark') {
        currentTheme = 'light';
    } else if (currentTheme === 'light') {
        currentTheme = 'dark';
    } else {
        body.classList.toggle('dark-mode');
    }
    
    themeSelect.value = currentTheme;
});

// Clock Functions (remain the same)
function updateClock() {
    const now = new Date();
    const timezone = timezoneSelect.value;
    
    let timeToShow = now;
    if (timezone !== 'local') {
        timeToShow = new Date(now.toLocaleString('en-US', { timeZone: timezone }));
    }

    const hours = timeToShow.getHours();
    const minutes = timeToShow.getMinutes();
    const seconds = timeToShow.getSeconds();

    const hrotation = 30 * (hours % 12) + minutes / 2;
    const mrotation = 6 * minutes;
    const srotation = 6 * seconds;

    hour.style.transform = `rotate(${hrotation}deg)`;
    minute.style.transform = `rotate(${mrotation}deg)`;
    second.style.transform = `rotate(${srotation}deg)`;

    let displayHours = hours;
    let period = '';
    
    if (formatToggle.checked) {
        period = hours >= 12 ? ' PM' : ' AM';
        displayHours = hours % 12 || 12;
    }

    digitalTime.textContent = 
        `${displayHours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}${period}`;
    
    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    dateDisplay.textContent = timeToShow.toLocaleDateString('en-US', options);

    checkAlarms(hours, minutes, seconds);
}

// Alarm Functions
function addAlarm(time, repeat, sound) {
    const alarm = {
        id: Date.now(),
        time,
        repeat,
        sound,
        active: true
    };
    alarms.push(alarm);
    updateAlarmsList();
    showNotification(`Alarm set for ${time}`);
}

function removeAlarm(id) {
    alarms = alarms.filter(alarm => alarm.id !== id);
    updateAlarmsList();
}

function toggleAlarm(id) {
    const alarm = alarms.find(a => a.id === id);
    if (alarm) {
        alarm.active = !alarm.active;
        updateAlarmsList();
    }
}

function updateAlarmsList() {
    alarmsList.innerHTML = '';
    alarms.forEach(alarm => {
        const alarmDiv = document.createElement('div');
        alarmDiv.className = 'alarm-item';
        alarmDiv.innerHTML = `
            <div class="alarm-time ${alarm.active ? '' : 'disabled'}">${alarm.time}</div>
            <div class="alarm-actions">
                <button class="toggle-alarm" data-id="${alarm.id}">
                    <i class="fas fa-${alarm.active ? 'bell' : 'bell-slash'}"></i>
                </button>
                <button class="delete-alarm" data-id="${alarm.id}">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
            <div class="alarm-sound">${alarm.sound}</div>
            <div class="alarm-repeat">${alarm.repeat ? 'Daily' : 'Once'}</div>
        `;
        alarmsList.appendChild(alarmDiv);
    });

    document.querySelectorAll('.toggle-alarm').forEach(btn => {
        btn.addEventListener('click', (e) => {
            toggleAlarm(parseInt(e.target.closest('button').dataset.id));
        });
    });

    document.querySelectorAll('.delete-alarm').forEach(btn => {
        btn.addEventListener('click', (e) => {
            removeAlarm(parseInt(e.target.closest('button').dataset.id));
        });
    });
}

function checkAlarms(hours, minutes, seconds) {
    if (seconds !== 0) return;
    
    const currentTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
    
    alarms.forEach(alarm => {
        if (alarm.active && alarm.time === currentTime) {
            triggerAlarm(alarm);
            if (!alarm.repeat) {
                alarm.active = false;
                updateAlarmsList();
            }
        }
    });
}

function triggerAlarm(alarm) {
    activeAlarm = alarm;
    showNotification(`Alarm! It's ${alarm.time}`);
    playAlarmSound(alarm.sound);
    showAlarmModal();
}

function showAlarmModal() {
    const modal = document.createElement('div');
    modal.className = 'alarm-modal';
    modal.innerHTML = `
        <div class="alarm-modal-content">
            <h3>Alarm!</h3>
            <p>It's ${activeAlarm.time}</p>
            <div class="alarm-modal-buttons">
                <button id="snooze-alarm"><i class="fas fa-bed"></i> Snooze (5 min)</button>
                <button id="dismiss-alarm"><i class="fas fa-check"></i> Dismiss</button>
            </div>
        </div>
    `;
    document.body.appendChild(modal);
    
    document.getElementById('dismiss-alarm').addEventListener('click', () => {
        stopAlarmSound();
        document.body.removeChild(modal);
        activeAlarm = null;
    });
    
    document.getElementById('snooze-alarm').addEventListener('click', () => {
        stopAlarmSound();
        document.body.removeChild(modal);
        
        const now = new Date();
        const snoozeTime = new Date(now.getTime() + 5 * 60000);
        const hours = snoozeTime.getHours();
        const minutes = snoozeTime.getMinutes();
        const snoozeTimeStr = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
        
        showNotification(`Alarm snoozed until ${snoozeTimeStr}`);
        
        const snoozeAlarm = {
            id: Date.now(),
            time: snoozeTimeStr,
            repeat: false,
            sound: activeAlarm.sound,
            active: true,
            isSnooze: true
        };
        alarms.push(snoozeAlarm);
        updateAlarmsList();
        activeAlarm = null;
    });
}

setAlarmBtn.addEventListener('click', () => {
    const time = alarmTimeInput.value;
    if (time) {
        const [hours, minutes] = time.split(':').map(Number);
        let displayHours = hours;
        let period = 'AM';

        if (hours >= 12) {
            period = 'PM';
            displayHours = hours > 12 ? hours - 12 : hours;
        } else if (hours === 0) {
            displayHours = 12;
        }

        const formattedTime = `${displayHours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')} ${period}`;
        const repeat = alarmRepeat.checked;
        const sound = alarmSoundSelect.value;
        addAlarm(formattedTime, repeat, sound);
        alarmTimeInput.value = '';
    } else {
        showNotification('Please select a time for the alarm', 'error');
    }
});

// Stopwatch Functions
function updateStopwatch() {
    const hours = Math.floor(stopwatchTime / 3600000);
    const minutes = Math.floor((stopwatchTime % 3600000) / 60000);
    const seconds = Math.floor((stopwatchTime % 60000) / 1000);
    const milliseconds = stopwatchTime % 1000;
    
    stopwatchDisplay.textContent = 
        `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}.${milliseconds.toString().padStart(3, '0')}`;
}

function startStopwatch() {
    if (!isStopwatchRunning) {
        isStopwatchRunning = true;
        const startTime = Date.now() - stopwatchTime;
        stopwatchInterval = setInterval(() => {
            stopwatchTime = Date.now() - startTime;
            updateStopwatch();
        }, 10);
        startStopwatchBtn.innerHTML = '<i class="fas fa-flag"></i> Lap';
        pauseStopwatchBtn.disabled = false;
        lapStopwatchBtn.disabled = false;
    }
}

function pauseStopwatch() {
    isStopwatchRunning = false;
    clearInterval(stopwatchInterval);
    startStopwatchBtn.innerHTML = '<i class="fas fa-play"></i> Start';
}

function resetStopwatch() {
    pauseStopwatch();
    stopwatchTime = 0;
    updateStopwatch();
    laps = [];
    updateLaps();
    pauseStopwatchBtn.disabled = true;
    lapStopwatchBtn.disabled = true;
}

function lapStopwatch() {
    if (isStopwatchRunning) {
        laps.unshift({
            number: laps.length + 1,
            time: stopwatchTime,
            display: stopwatchDisplay.textContent
        });
        updateLaps();
    }
}

function updateLaps() {
    lapsContainer.innerHTML = '';
    laps.forEach((lap, index) => {
        const lapDiv = document.createElement('div');
        lapDiv.className = 'lap-item';
        lapDiv.innerHTML = `
            <span class="lap-number">${lap.number}</span>
            <span class="lap-time">${lap.display}</span>
        `;
        if (index === 0) {
            lapDiv.classList.add('fastest');
        } else if (index === laps.length - 1 && laps.length > 1) {
            lapDiv.classList.add('slowest');
        }
        lapsContainer.appendChild(lapDiv);
    });
}

// Timer Functions
function updateTimer() {
    const hours = Math.floor(timerTime / 3600);
    const minutes = Math.floor((timerTime % 3600) / 60);
    const seconds = timerTime % 60;
    
    timerDisplay.textContent = 
        `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}

function startTimer() {
    if (!isTimerRunning) {
        // If timer is at 0, get values from inputs
        if (timerTime === 0) {
            const hours = parseInt(hoursInput.value) || 0;
            const minutes = parseInt(minutesInput.value) || 0;
            const seconds = parseInt(secondsInput.value) || 0;
            timerTime = hours * 3600 + minutes * 60 + seconds;
            
            if (timerTime === 0) {
                showNotification('Please set a timer duration', 'error');
                return;
            }
        }
        
        isTimerRunning = true;
        timerInterval = setInterval(() => {
            if (timerTime > 0) {
                timerTime--;
                updateTimer();
            } else {
                timerComplete();
            }
        }, 1000);
        startTimerBtn.disabled = true;
        pauseTimerBtn.disabled = false;
    }
}

function pauseTimer() {
    isTimerRunning = false;
    clearInterval(timerInterval);
    startTimerBtn.disabled = false;
}

function resetTimer() {
    pauseTimer();
    timerTime = 0;
    updateTimer();
    hoursInput.value = '';
    minutesInput.value = '';
    secondsInput.value = '';
    pauseTimerBtn.disabled = true;
}

function timerComplete() {
    pauseTimer();
    showNotification('Timer completed!');
    
    // Play sound
    timerAudio.src = soundFiles[timerSoundSelect.value];
    timerAudio.play();
    
    // Flash timer display
    let flashCount = 0;
    const flashInterval = setInterval(() => {
        timerDisplay.classList.toggle('highlight');
        flashCount++;
        if (flashCount >= 10) {
            clearInterval(flashInterval);
            timerDisplay.classList.remove('highlight');
        }
    }, 500);
}


// Helper Functions
function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.classList.add('fade-out');
        setTimeout(() => {
            document.body.removeChild(notification);
        }, 500);
    }, 3000);
}

// Event Listeners
startStopwatchBtn.addEventListener('click', startStopwatch);
pauseStopwatchBtn.addEventListener('click', pauseStopwatch);
lapStopwatchBtn.addEventListener('click', lapStopwatch);
resetStopwatchBtn.addEventListener('click', resetStopwatch);
startTimerBtn.addEventListener('click', startTimer);
pauseTimerBtn.addEventListener('click', pauseTimer);
resetTimerBtn.addEventListener('click', resetTimer);
timezoneSelect.addEventListener('change', updateClock);
formatToggle.addEventListener('change', () => {
    formatLabel.textContent = formatToggle.checked ? '12-hour' : '24-hour';
    updateClock();
});

// Initialize
pauseStopwatchBtn.disabled = true;
lapStopwatchBtn.disabled = true;
pauseTimerBtn.disabled = true;

setInterval(updateClock, 1000);
updateClock();
applyTheme();